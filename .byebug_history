c
_L
c
_L
c
_L
c
valc
c
matrix
key
c
current
c
current
c
current
c
i
o
c
cc
c
l
c
l
c
@func
c
nmax
@namx
nmax
@delta
c
@x0
@func
func
fm
c
_Fx0
f
c
@nmax
@delta
@x0
@func
@fx
c
Methods::NonLinearEquations::IncrementalSearch.exec(args[:fx], args[:x0], args[:delta], args[:nmax])
c
a[i]
a[k]
a[k], a[i]
c
a
c
a
a[i][k]
i
k
c
perm
c
a
c
a
c
a
c
max_value
c
a
c
max_value
c
a
c
a
c
a
max_col
perm
c
max_value
c
k
max_col
max_row
max_value
c
ap a
c
ap a
c
ap a
c
ap a
a
c
C
c
ap a
c
ap a
c
k
ap a
c
a
c
max_index
a
c
max_index
c
max_index
c
max_index
c
a
c
@vector_b
b
a
c
@matrix_a.size
c
n
b
a
q
1
c
Matrix[@vector_b]
Matrix[*@vector_b]
@vector_b
c
Matrix[*@vector_b]
c
x
c
Matrix @matrix_a
Matrix[@matrix_a]
@matrix_a
c
Matrix.new(@matrix_a)
Matrix
c
Matrix[[1,1],[1,1]]
Matrix
c
Matrix.new()c
Matrix.new()
Matrix([[1,1,1][1,1,1],[1,1,1]])
Matrix)[[1,1,1][1,1,1],[1,1,1]])
Matrix[[1,1,1][1,1,1],[1,1,1]]
Matrix[[1,1,1][1,1,1]]
Matrix[1,1,1]
Matrix
c
v
c
Matrix(@matrix_a)
c
Matrix(@matrix_a)
c
Matrix(@matrix_a)
c
x
x_old
c
x_old
x_olf
c
function
func
f
c
value
@x0_value
x0_value
x0
c
@func
value
key
keu
c
@delta
delta
x0 + @delta
x0
c
@func
c
D!func
@func
D!func
func
f
x0
c
derivate
func
x0
c
b.to_f
b.to_g
b
a
fb
fa
c
fa * fb > 0
fa * fb
fb
fa
c
b.is_a? Numeric
b
a
c
fv
fa
c
b
a
fb
fa
c
fb
fa
c
fa * fb>0
fa * fb
fb
fa
fb
fa
c
func
f
c
m_new
m
fm
